/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vista.produccion;

import controlador.administracion.LoteControlador;
import controlador.administracion.RolPersonaControlador;
import controlador.produccion.AplicacionControlador;
import controlador.produccion.InsumoFitosanitarioControlador;
import dao.exceptions.NonexistentEntityException;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import modelo.produccion.administracion.Lote;
import modelo.produccion.administracion.Modulo;
import modelo.produccion.administracion.Persona;
import modelo.produccion.administracion.Rol;
import modelo.produccion.aplicaciones.Aplicacion;
import modelo.produccion.aplicaciones.Insumo;
import modelo.produccion.aplicaciones.MetodoDeAplicacion;
import modelo.produccion.aplicaciones.TipoDeAplicacion;
import modelo.produccion.monitoreo.Variable;
import util.DateFormatter;
import util.TableColumnAdjuster;

/**
 *
 * @author fredy
 */
public class AplicacionFitosanitariaIF extends javax.swing.JInternalFrame {

    /**
     * Creates new form AplicacionFitosanitariaIF
     */
    private AplicacionControlador controlador;
    private Aplicacion registroSeleccionado;
    private List<Aplicacion> lista;
    private boolean habilitado = false;

    public AplicacionFitosanitariaIF() {
        initComponents();
        controlador = new AplicacionControlador();
        registroSeleccionado = null;
        Calendar c = GregorianCalendar.getInstance();
        c.setTime(new Date());
        fechaInicioChooserCombo.setCurrent(c);
        c.add(Calendar.DAY_OF_MONTH, 1);
        fechaFinChooserCombo.setMinDate(c);
        c.add(Calendar.MONTH, 1);
        c.add(Calendar.DAY_OF_MONTH, -1);
        fechaFinChooserCombo.setCurrent(c);
        fechaFinChooserCombo.setSelectedDate(c);
        cargarListas();
        if (habilitado) {
            cargarTablaPrincipal();
            guardar(false);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel3 = new javax.swing.JPanel();
        nuevoButton = new javax.swing.JButton();
        eliminarButton = new javax.swing.JButton();
        editarButton = new javax.swing.JButton();
        guardarButton = new javax.swing.JButton();
        fechaInicioChooserCombo = new datechooser.beans.DateChooserCombo();
        loteComboBox = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        fechaFinChooserCombo = new datechooser.beans.DateChooserCombo();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        principalTable = new javax.swing.JTable();
        edicionPanel = new javax.swing.JPanel();
        productoComboBox = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        equipoTextField = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        responsableComboBox = new javax.swing.JComboBox();
        autorizadoComboBox = new javax.swing.JComboBox();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        observacionesTextField = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        cantidadFloatField = new util.FloatField();
        aguaFloatField = new util.FloatField();
        jornalesFloatField = new util.FloatField();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Aplicaciones Fitosanitarias");
        setMinimumSize(new java.awt.Dimension(1269, 568));
        setName(""); // NOI18N
        setPreferredSize(new java.awt.Dimension(1269, 568));

        nuevoButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        nuevoButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/32x32/add42.png"))); // NOI18N
        nuevoButton.setText("Nuevo");
        nuevoButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        nuevoButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        nuevoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nuevoButtonActionPerformed(evt);
            }
        });

        eliminarButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        eliminarButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/32x32/delete27.png"))); // NOI18N
        eliminarButton.setText("Eliminar");
        eliminarButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        eliminarButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        eliminarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eliminarButtonActionPerformed(evt);
            }
        });

        editarButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        editarButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/32x32/edit23.png"))); // NOI18N
        editarButton.setText("Editar");
        editarButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        editarButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        editarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editarButtonActionPerformed(evt);
            }
        });

        guardarButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/32x32/database13.png"))); // NOI18N
        guardarButton.setText("Guardar");
        guardarButton.setEnabled(false);
        guardarButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        guardarButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        guardarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardarButtonActionPerformed(evt);
            }
        });

        fechaInicioChooserCombo.setFieldFont(new java.awt.Font("Tahoma", java.awt.Font.PLAIN, 14));
        fechaInicioChooserCombo.setMinDate(new java.util.GregorianCalendar(2012, 0, 1));
        fechaInicioChooserCombo.addSelectionChangedListener(new datechooser.events.SelectionChangedListener() {
            public void onSelectionChange(datechooser.events.SelectionChangedEvent evt) {
                fechaInicioChooserComboOnSelectionChange(evt);
            }
        });

        loteComboBox.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        loteComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                loteComboBoxItemStateChanged(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setText("Fecha");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setText("Lote");

        jLabel13.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel13.setText("Fecha");

        fechaFinChooserCombo.setFieldFont(new java.awt.Font("Tahoma", java.awt.Font.PLAIN, 14));
        fechaFinChooserCombo.addSelectionChangedListener(new datechooser.events.SelectionChangedListener() {
            public void onSelectionChange(datechooser.events.SelectionChangedEvent evt) {
                fechaFinChooserComboOnSelectionChange(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(nuevoButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(eliminarButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(editarButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(guardarButton)
                .addGap(35, 35, 35)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(fechaInicioChooserCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel13)
                .addGap(18, 18, 18)
                .addComponent(fechaFinChooserCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(loteComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(guardarButton)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(editarButton)
                        .addComponent(eliminarButton)
                        .addComponent(nuevoButton)))
                .addGap(315, 315, 315))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(fechaFinChooserCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(loteComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel2)
                        .addComponent(jLabel13))
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jLabel1)
                        .addComponent(fechaInicioChooserCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        principalTable.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        principalTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Tipo", "Autorización", "Aplicación", "Producto", "Motivo 1", "Motivo 2", "Motivo 3", "Cantidad", "L de agua", "Método", "Responsable", "Autoriza", "Horas", "Observaciones", "Asistente", "Productor"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Float.class, java.lang.Float.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Float.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        principalTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        TableColumnAdjuster tca = new TableColumnAdjuster(principalTable);
        tca.adjustColumns();
        jScrollPane1.setViewportView(principalTable);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1046, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 450, Short.MAX_VALUE)
        );

        edicionPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Edición"));
        edicionPanel.setLayout(new java.awt.GridBagLayout());

        productoComboBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = 25;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(42, 45, 0, 16);
        edicionPanel.add(productoComboBox, gridBagConstraints);

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel3.setText("Producto");
        edicionPanel.add(jLabel3, new java.awt.GridBagConstraints());

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel4.setText("Motivo");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        edicionPanel.add(jLabel4, gridBagConstraints);

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel7.setText("Cantidad");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        edicionPanel.add(jLabel7, gridBagConstraints);

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel8.setText("L. de agua");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        edicionPanel.add(jLabel8, gridBagConstraints);

        equipoTextField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = 49;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 45, 0, 16);
        edicionPanel.add(equipoTextField, gridBagConstraints);

        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel9.setText("Equipo");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        edicionPanel.add(jLabel9, gridBagConstraints);

        responsableComboBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        responsableComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                responsableComboBoxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = 25;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 45, 0, 16);
        edicionPanel.add(responsableComboBox, gridBagConstraints);

        autorizadoComboBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = 25;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 45, 0, 16);
        edicionPanel.add(autorizadoComboBox, gridBagConstraints);

        jLabel10.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel10.setText("Responsable");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        edicionPanel.add(jLabel10, gridBagConstraints);

        jLabel11.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel11.setText("Autorizado");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        edicionPanel.add(jLabel11, gridBagConstraints);

        jLabel12.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel12.setText("Jornales");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        edicionPanel.add(jLabel12, gridBagConstraints);

        observacionesTextField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 16;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = 49;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 45, 18, 16);
        edicionPanel.add(observacionesTextField, gridBagConstraints);

        jLabel15.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel15.setText("Observaciones");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 16;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        edicionPanel.add(jLabel15, gridBagConstraints);

        cantidadFloatField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = 49;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(63, 45, 0, 16);
        edicionPanel.add(cantidadFloatField, gridBagConstraints);

        aguaFloatField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = 49;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 45, 0, 16);
        edicionPanel.add(aguaFloatField, gridBagConstraints);

        jornalesFloatField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = 49;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(8, 45, 0, 16);
        edicionPanel.add(jornalesFloatField, gridBagConstraints);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(edicionPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(edicionPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void nuevoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nuevoButtonActionPerformed
        // TODO add your handling code here:
        registroSeleccionado = null;
        guardar(true);
        cargarDatosRegistroSeleccionado();
    }//GEN-LAST:event_nuevoButtonActionPerformed

    private void eliminarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eliminarButtonActionPerformed
        // TODO add your handling code here:
        guardar(false);
        if (principalTable.getSelectedRow() == -1) {
            JOptionPane.showMessageDialog(null, "No hay un registro seleccionado, por favor seleccione uno.", "Registro no seleccionado", JOptionPane.INFORMATION_MESSAGE);
        } else if (principalTable.getValueAt(principalTable.getSelectedRow(), 0) == null) {
            JOptionPane.showMessageDialog(null, "No hay un registro válido seleccionado, por favor seleccione uno.", "Registro no seleccionado", JOptionPane.INFORMATION_MESSAGE);
        } else {
            registroSeleccionado = lista.get(principalTable.getSelectedRow());
            try {
                controlador.eliminar(registroSeleccionado.getId());
            } catch (NonexistentEntityException ex) {
                JOptionPane.showMessageDialog(null, "El registro ya no existe.", "Error al eliminar", JOptionPane.INFORMATION_MESSAGE);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "El registro tiene datos relacionados.", "Error al eliminar", JOptionPane.INFORMATION_MESSAGE);
            }
            registroSeleccionado = null;
            cargarTablaPrincipal();
        }
    }//GEN-LAST:event_eliminarButtonActionPerformed

    private void editarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editarButtonActionPerformed
        // TODO add your handling code here:
        guardar(false);
        registroSeleccionado = null;
        if (principalTable.getSelectedRow() == -1) {
            JOptionPane.showMessageDialog(null, "No hay un registro seleccionado, por favor seleccione uno.", "Registro no seleccionado", JOptionPane.INFORMATION_MESSAGE);
        } else if (principalTable.getValueAt(principalTable.getSelectedRow(), 0) == null) {
            JOptionPane.showMessageDialog(null, "No hay un registro válido seleccionado, por favor seleccione uno.", "Registro no seleccionado", JOptionPane.INFORMATION_MESSAGE);
        } else {
            registroSeleccionado = lista.get(principalTable.getSelectedRow());
            guardar(true);
        }
        cargarDatosRegistroSeleccionado();
    }//GEN-LAST:event_editarButtonActionPerformed

    private void guardarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardarButtonActionPerformed
        // TODO add your handling code here:
        TipoDeAplicacion tipo = tipoComboBox.getSelectedItem();
        Modulo modulo = moduloComboBox.getSelectedItem();
        Date fechaAutorizacion = fechaAutorizacionChooserCombo.getCurrent().getTime();
        Date fechaAplicacion = fechaAplicacionChooserCombo.getCurrent().getTime();
        Insumo producto = (Insumo) productoComboBox.getSelectedItem();
        Variable motivo1 = motivo1TextField.getText();
        Variable motivo2 = motivo2TextField.getText();
        Variable motivo3 = motivo3TextField.getText();
        float cantidad = cantidadFloatField.getFloat();
        float agua = aguaFloatField.getFloat();
        MetodoDeAplicacion metodo = metodoComboBox.getSelectedItem();
        Persona responsable = (Persona) responsableComboBox.getSelectedItem();
        Persona autoriza = (Persona) autorizadoComboBox.getSelectedItem();
        float horas = jornalesFloatField.getFloat();
        String observaciones = observacionesTextField.getText();
        if (registroSeleccionado == null) {
            Aplicacion nuevo = controlador.nuevo(tipo, modulo, fechaAutorizacion, fechaAplicacion, producto, motivo1, motivo2, motivo3, cantidad, agua, metodo, responsable, autoriza, horas, observaciones);
            if (controlador.validar(nuevo)) {
                controlador.guardar(nuevo);
                guardar(false);
                cargarDatosRegistroSeleccionado();
                cargarTablaPrincipal();
            }
        } else {
            registroSeleccionado.setTipo(tipo);
            registroSeleccionado.setModulo(modulo);
            registroSeleccionado.setFechaDeAplicacion(fechaAplicacion);
            registroSeleccionado.setFechaDeAutorizacion(fechaAutorizacion);
            registroSeleccionado.setProducto(producto);
            registroSeleccionado.setMotivo1(motivo1);
            registroSeleccionado.setMotivo2(motivo2);
            registroSeleccionado.setMotivo3(motivo3);
            registroSeleccionado.setCantidad(cantidad);
            registroSeleccionado.setLitrosDeAgua(agua);
            registroSeleccionado.setMetodo(metodo);
            registroSeleccionado.setResponsable(responsable);
            registroSeleccionado.setAutoriza(autoriza);
            registroSeleccionado.setHoras(horas);
            registroSeleccionado.setObservaciones(observaciones);
            if (controlador.validar(registroSeleccionado)) {
                try {
                    controlador.editar(registroSeleccionado);
                    guardar(false);
                    cargarDatosRegistroSeleccionado();
                    cargarTablaPrincipal();
                } catch (Exception ex) {
                }
            }
        }
    }//GEN-LAST:event_guardarButtonActionPerformed

    private void loteComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_loteComboBoxItemStateChanged
        // TODO add your handling code here:
        cargarTablaPrincipal();
    }//GEN-LAST:event_loteComboBoxItemStateChanged

    private void fechaInicioChooserComboOnSelectionChange(datechooser.events.SelectionChangedEvent evt) {//GEN-FIRST:event_fechaInicioChooserComboOnSelectionChange
        // TODO add your handling code here:
        fechaFinChooserCombo.setMinDate(fechaInicioChooserCombo.getCurrent());
        cargarTablaPrincipal();
    }//GEN-LAST:event_fechaInicioChooserComboOnSelectionChange

    private void fechaFinChooserComboOnSelectionChange(datechooser.events.SelectionChangedEvent evt) {//GEN-FIRST:event_fechaFinChooserComboOnSelectionChange
        // TODO add your handling code here:
    }//GEN-LAST:event_fechaFinChooserComboOnSelectionChange

    private void responsableComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_responsableComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_responsableComboBoxActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private util.FloatField aguaFloatField;
    private javax.swing.JComboBox autorizadoComboBox;
    private util.FloatField cantidadFloatField;
    private javax.swing.JPanel edicionPanel;
    private javax.swing.JButton editarButton;
    private javax.swing.JButton eliminarButton;
    private javax.swing.JTextField equipoTextField;
    private datechooser.beans.DateChooserCombo fechaFinChooserCombo;
    private datechooser.beans.DateChooserCombo fechaInicioChooserCombo;
    private javax.swing.JButton guardarButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private util.FloatField jornalesFloatField;
    private javax.swing.JComboBox loteComboBox;
    private javax.swing.JButton nuevoButton;
    private javax.swing.JTextField observacionesTextField;
    private javax.swing.JTable principalTable;
    private javax.swing.JComboBox productoComboBox;
    private javax.swing.JComboBox responsableComboBox;
    // End of variables declaration//GEN-END:variables

    private void cargarTablaPrincipal() {
        while (principalTable.getRowCount() > 0) {
            ((DefaultTableModel) principalTable.getModel()).removeRow(0);
        }
        lista = controlador.leerLista((Lote) loteComboBox.getSelectedItem(), fechaInicioChooserCombo.getSelectedDate().getTime(), fechaFinChooserCombo.getSelectedDate().getTime());
        for (Aplicacion ap : lista) {
            Object[] row = {
                ap.getTipo(),
                ap.getModulo(),
                DateFormatter.formatDate(ap.getFechaDeAutorizacion()),
                DateFormatter.formatDate(ap.getFechaDeAplicacion()),
                ap.getProducto(),
                ap.getMotivo1(),
                ap.getMotivo2(),
                ap.getMotivo3(),
                ap.getCantidad(),
                ap.getLitrosDeAgua(),
                ap.getMetodo(),
                ap.getResponsable(),
                ap.getAutoriza(),
                ap.getHoras(),
                ap.getObservaciones()};
            ((DefaultTableModel) principalTable.getModel()).addRow(row);
        }
    }

    private void guardar(boolean b) {
        guardarButton.setEnabled(b);
        edicionPanel.setVisible(b);
        if (!b) {
            registroSeleccionado = null;
        }
    }

    private void cargarDatosRegistroSeleccionado() {
        if (registroSeleccionado == null) {
            Calendar c = GregorianCalendar.getInstance();
            c.setTime(new Date());
            fechaChooserCombo.setCurrent(c);
            if (productoComboBox.getItemCount() > 0) {
                productoComboBox.setSelectedIndex(0);
            }
            motivoTextField.setText(null);
            pcBooleanComboBox.setSelected(false);
            trBooleanComboBox.setSelected(false);
            cantidadFloatField.setText("0");
            aguaFloatField.setText("0");
            equipoTextField.setText(null);
            if (responsableComboBox.getItemCount() > 0) {
                responsableComboBox.setSelectedIndex(0);
            }
            if (autorizadoComboBox.getItemCount() > 0) {
                autorizadoComboBox.setSelectedIndex(0);
            }
            jornalesFloatField.setText("0");
            observacionesTextField.setText(null);
            asistenteComboBox.setSelectedIndex(0);
            productorComboBox.setSelectedIndex(0);
        } else {
            Calendar c = GregorianCalendar.getInstance();
            c.setTime(registroSeleccionado.getFechaDeAplicacion());
            fechaChooserCombo.setCurrent(c);
            productoComboBox.setSelectedItem(registroSeleccionado.getProducto());
            motivoTextField.setText(registroSeleccionado.getMotivo());
            pcBooleanComboBox.setSelected(registroSeleccionado.isPc());
            trBooleanComboBox.setSelected(registroSeleccionado.isTr());
            cantidadFloatField.setText(registroSeleccionado.getCantidad() + "");
            aguaFloatField.setText(registroSeleccionado.getLitrosDeAgua() + "");
            equipoTextField.setText(registroSeleccionado.getEquipo());
            responsableComboBox.setSelectedItem(registroSeleccionado.getResponsable());
            autorizadoComboBox.setSelectedItem(registroSeleccionado.getAutoriza());
            jornalesFloatField.setText(registroSeleccionado.getHoras() + "");
            observacionesTextField.setText(registroSeleccionado.getObservaciones());
            if (registroSeleccionado.getAsistente() != null) {
                for (int i = 0; i < asistenteComboBox.getItemCount(); i++) {
                    if (asistenteComboBox.getItemAt(i) != null
                            && ((Persona) asistenteComboBox.getItemAt(i)).getId() == registroSeleccionado.getAsistente().getId()) {
                        asistenteComboBox.setSelectedIndex(i);
                        break;
                    }
                }
            }
            if (registroSeleccionado.getProductor() != null) {
                for (int i = 0; i < productorComboBox.getItemCount(); i++) {
                    if (productorComboBox.getItemAt(i) != null
                            && ((Persona) productorComboBox.getItemAt(i)).getId() == registroSeleccionado.getProductor().getId()) {
                        productorComboBox.setSelectedIndex(i);
                        break;
                    }
                }
            }
        }
    }

    private void cargarListas() {
        cargarListaLotes();
        cargarListaProductos();
        cargarListaResponsables();
        cargarListaAutorizados();
        cargarListaAsistentes();
        cargarListaProductores();
        revisarDatosObligatorios();
    }

    private void cargarListaLotes() {
        loteComboBox.removeAllItems();
        List<Lote> leerLista = new LoteControlador().leerLista();
        for (Lote l : leerLista) {
            loteComboBox.addItem(l);
        }
        if (leerLista.size() > 0) {
            loteComboBox.setSelectedIndex(0);
        }
    }

    private void cargarListaProductos() {
        productoComboBox.removeAllItems();
        for (Insumo p : new InsumoFitosanitarioControlador().leerLista()) {
            productoComboBox.addItem(p);
        }
        if (productoComboBox.getItemCount() > 0) {
            productoComboBox.setSelectedIndex(0);
        }
    }

    private void cargarListaResponsables() {
        responsableComboBox.removeAllItems();
        Rol rol = null;
        try {
            rol = new RolControlador().buscar("Trabajador(a)");
        } catch (Exception ex) {
            System.out.println("Rol trabajador no encontrado" + ex.getMessage());
        }
        for (Persona p : new RolPersonaControlador().leerLista(rol)) {
            responsableComboBox.addItem(p);
        }
    }

    private void cargarListaAutorizados() {
        autorizadoComboBox.removeAllItems();
        Rol rol = null;
        try {
            rol = new RolControlador().buscar("Administrador(a)");
        } catch (Exception ex) {
            System.out.println("Rol administrador no encontrado");
        }
        for (Persona p : new RolPersonaControlador().leerLista(rol)) {
            autorizadoComboBox.addItem(p);
        }
    }

    private void cargarListaAsistentes() {
        asistenteComboBox.removeAllItems();
        asistenteComboBox.addItem(null);
        Rol rol = null;
        try {
            rol = new RolControlador().buscar("Asistente Técnico(a)");
        } catch (Exception ex) {
            System.out.println("Rol asistente no encontrado");
        }
        for (Persona p : new RolPersonaControlador().leerLista(rol)) {
            asistenteComboBox.addItem(p);
        }
    }

    private void cargarListaProductores() {
        productorComboBox.removeAllItems();
        productorComboBox.addItem(null);
        Rol rol = null;
        try {
            rol = new RolControlador().buscar("Productor(a)");
        } catch (Exception ex) {
            System.out.println("Rol productor no encontrado");
        }
        for (Persona p : new RolPersonaControlador().leerLista(rol)) {
            productorComboBox.addItem(p);
        }
    }

    private void revisarDatosObligatorios() {
        if (productoComboBox.getItemCount() == 0) {
            JOptionPane.showMessageDialog(null, "No hay registro de insumos fitosanitarios en la base de datos, por favor cree uno y vuelva a intentar.", "Registros no encontrados", JOptionPane.INFORMATION_MESSAGE);
            deshabilitarForma();
            return;
        }
        if (loteComboBox.getItemCount() == 0) {
            JOptionPane.showMessageDialog(null, "No hay registro de lote en la base de datos, por favor cree uno y vuelva a intentar.", "Registros no encontrados", JOptionPane.INFORMATION_MESSAGE);
            deshabilitarForma();
            return;
        }
        if (responsableComboBox.getItemCount() == 0) {
            JOptionPane.showMessageDialog(null, "No hay registro de empleados con rol de Trabajador(a) en la base de datos, por favor cree uno y vuelva a intentar.", "Registros no encontrados", JOptionPane.INFORMATION_MESSAGE);
            deshabilitarForma();
            return;
        }
        if (autorizadoComboBox.getItemCount() == 0) {
            JOptionPane.showMessageDialog(null, "No hay registro de empleados con rol de Administrador(a) en la base de datos, por favor cree uno y vuelva a intentar.", "Registros no encontrados", JOptionPane.INFORMATION_MESSAGE);
            deshabilitarForma();
            return;
        }
        habilitado = true;
    }

    private void deshabilitarForma() {
        nuevoButton.setEnabled(false);
        editarButton.setEnabled(false);
        eliminarButton.setEnabled(false);
        guardarButton.setEnabled(false);
        loteComboBox.setEnabled(false);
        guardar(false);
        principalTable.setEnabled(false);
        fechaInicioChooserCombo.setEnabled(false);
        fechaFinChooserCombo.setEnabled(false);
    }
}
